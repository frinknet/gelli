#!/usr/bin/env sh
set -e

# USAGE: gelli model - Manage Models
# 
# gelli model list [model]     - Lists  models
# gelli model import [model]   - Import models
# gelli model export [model]   - Export models
# gelli model delete [model]   - Delete models
# gelli model download [model] - Downloads models
# 
#   Use ol:model:tag for Ollama model.
#   Use hf:repo:quant:file for HuggingFace models.
# 
#   Only works with .gguf files

parse_ol() {
  spec=${1#ol:}
  slug=$(printf '%s\n' "$spec" | cut -d: -f1)
  tag=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  tag="${tag:-latest}"
  out=$(echo "$slug:$tag" | sed 's#[:/\]#-#g')
  dest="/models/$out.gguf"

  [ -f "$dest" ] && { echo "$out"; return; }

  manifest="https://registry.ollama.ai/v2/library/${slug}/manifests/${tag}"

  wget -qO- --method=HEAD "$manifest" || error FAILED MANIFEST $manifest

  digest=$(wget -qO- "$manifest" | jq -r '.layers[0].digest')
  url="https://registry.ollama.ai/v2/library/${slug}/blobs/$digest"

  echo "$dest" "$url"
}

parse_hf() {
  spec=${1#hf:}
  repo=$(printf '%s\n' "$spec" | cut -d: -f1)
  quant=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  file=$(printf '%s\n' "$spec" | cut -s -d: -f3)
  out=$(echo "${repo}-${quant}-${file}" | sed 's#[:/\]#-#g')
  dest="/models/$out.gguf"

  [ -f "$dest" ] && { echo "$out"; return; }

  url="https://huggingface.co/$repo/resolve/main/$file.gguf"

  echo "$dest" "$url"
}

parse() {
  case "$1" in
    ol:*) parse_ol "$1";;
    hf:*) parse_hf "$1";;
    *) echo "/models/$(basename "$1").gguf";;
  esac
}

fetch() {
  dest="$1"
  url="$2"

  [ -f "$dest" ] || wget -qO "$dest" "$url" || error FAILED FETCH $url
  [ -f "$dest" ] && basename "${dest%.*}"
}

download() {
  for arg in "$@"; do
    fetch $(parse "$arg") || error MISSING $arg
  done
}

outfile() {
  src="$1"
  dest="/work/$(basename "$1")"

  mv "$src" "$dest" 
}

export() {
  for arg in "$@"; do
    outfile $(parse "$arg") || error MISSING $arg
  done
}

infile() {
  src="$1"
  dest="/models/$(basename "$1")"

  mv "$src" "$dest" 
}

import() {
  for arg in "$@"; do
    infile $(parse "$arg") || error MISSING $arg
  done
}

list() {
  glob="${1:-*}"

  cd /models

  for f in $glob; do
    [ -f "$f" ] && printf '%s\n' "${f%.*}"
  done

  exit 0
}

delete() {
  for arg in "$@"; do
    file=$(parse "$arg")

    rm "$file" || error FAILED TO REMOVE $arg
  done
}

error() {
  echo $@ >&2

  exit 1
}

case "$1" in
  "") exec gelli-help model;;
  list) list "${@:2}";;
  delete) delete "${@:2}";;
  download) download "$@";;
  import) import "$@";;
  export) export "$@";;
  *) download "$@";;
esac
