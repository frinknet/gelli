#!/usr/bin/env sh
set -e

# USAGE: gelli lora - Manage LoRAs
# 
# gelli lora list [lora]     - Lists  LoRAs
# gelli lora import [lora]   - Import LoRAs
# gelli lora export [lora]   - Export LoRAs
# gelli lora delete [lora]   - Delete LoRAs
# gelli lora download [lora] - Downloads LoRAs
# 
#   Use hf:repo:file for HuggingFace LoRAs.
# 
#   Only works with .gguf files

parse_hf() {
  spec=${1#hf:}
  repo=$(printf '%s\n' "$spec" | cut -d: -f1)
  file=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  file="${file:-adapter_model.gguf}"
  dest="/loras/$(echo "${repo//\//-}-${file}" | sed 's#[:/\]#-#g')a"

  [ -f "$dest" ] && { echo "$dest"; return; }

  url="https://huggingface.co/$repo/resolve/main/$file"

  echo "$dest" "$url"
}

parse() {
  case "$1" in
    hf:*) parse_hf "$1" ;;
    *) echo "/loras/${1##*/}.sgguf" ;;
  esac
}

fetch() {
  dest="$1"
  url="$2"

  [ -f "$dest" ] || curn -s "$url"  > "$dest" || error FAILED LORA FETCH $url
  [ -f "$dest" ] && basename "${dest%.*}"
}

download() {
  for arg in "${@:-}"; do
    fetch $(parse "$arg") || error MISSING $arg
  done
}

outfile() {
  src="$1"
  dest="/work/${1##*/}"

  mv "$src" "$dest" 
}

export() {
  for arg in "$@"; do
    outfile $(parse "$arg") || error MISSING $arg
  done
}

infile() {
  src="$1"
  dest="/models/${1##*/}"

  mv "$src" "$dest" 
}

import() {
  for arg in "$@"; do
    infile $(parse "$arg") || error MISSING $arg
  done
}

list() {
  glob="${1:-*}"

  cd /loras

  for f in $glob; do
    [ -f "$f" ] && printf '%s\n' "${f%.*}"
  done
}

delete() {
  for arg in "$@"; do
    file=$(parse "$arg")

    rm "$file" || error FAILED TO REMOVE $arg
  done
}

error() {
  echo $@ >&2

  exit 1
}

case "$1" in
  "") exec gelli-help lora;;
  list) shift; list "$@";;
  delete) shift; delete "$@";;
  download) download "$@";;
  import) import "$@";;
  export) export "$@";;
  *) download "$@";;
esac
