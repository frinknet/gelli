#!/usr/bin/env sh
set -euo pipefail

# USAGE: gelli coder - Run an iteration of the coder AI
#
# gelli coder [model] [loras...] [-- prompt] - Run model inference with specified prompt and optional LoRAs
#
#   MODEL defaults to $GELLI_MODEL or ol:qwen2.5-Coder:0.5b-Instruct
#   LORAS defaults to $GELLI_LORAS (space separated)
#
#   Examples:
#
#     gelli coder ol:qwen3:0.6b -- "Review the code base"
#     cat file  |  gelli prompt ol:qwen2.5-Coder:0.5b-Instruct -- "can you do something with this"

API=${GELLI_API_URL:-http://localhost:$PORT}
KEY=${GELLI_API_KEY:-GELLI}
MAX=${GELLI_MAY_TRYS:-12}

CTX_SIZE=${GELLI_CTX_SIZE:-0}
BATCH_SIZE=${GELLI_BATCH_SIZE:-512}
OUTPUT_SIZE=${GELLI_OUTPUT_SIZE:-999999}

PORT=${GELLI_PORT:-7771}
MODEL=""
LORAS=""
FLAGS="$GELLI_LLAMA_FLAGS"
PROMPT=""
BRANCH="${GELLI_BRANCH:-gelli-coder}"

call-ai() {
  curl -s "$API" \
    -H "Authorization: Bearer $KEY" \
    -H "Content-Type: application/json" \
    -d @- <<EOF
{
  "model":"$MODEL",
  "messages":$1,
  "functions":$(list-fn),
  "function_call":"auto"
}
EOF
}

call-fn() {
  [ -f "/tools/$1" ] && exec "/tools/$1" "$2"
  [ "$1" = "date" ] && exec date

  echo "Error: unknown tool '$1'"
}

list-fn() {
  grep '^# DEF: ' /tools/* | sed 's/^# DEF: //' | jq -R 'fromjson? | select(.)' | jq -s '.'
}

setup-worktree() {
  dir="/worktree/$BRANCH"

  mkdir -p "$dir"
  git add worktree "$dir"
  cd "$dir"

  # Try to switch, create if doesn't exist
  git switch "$BRANCH" 2>/dev/null || git switch -c "$BRANCH"
}

while [ $# -gt 0 ]; do
  case $1 in
    --)
      shift

      if [ -z "$PROMPT" ]; then
        PROMPT="$*"
      else
        PROMPT="$PROMPT\n\n$*"
      fi

      break
      ;;
    *)
      if [ -z "$MODEL" ]; then
        MODEL="$1"
      else
        LORAS="$LORAS $1"
      fi
      ;;
  esac

  shift
done
if [ -z "$MODEL" ]; then
  MODEL=${GELLI_MODEL:-$GELLI_DEFAULT}
  LORAS=${GELLI_LORAS:-}
fi

if [ -z "$PROMPT" ]; then
  echo "Missing prompt..."
  exit 1
fi

MODEL=$(gelli-models download $MODEL)
LORAS=$(gelli-loras download $LORAS)

if [ -n "$LORAS" ]; then
  for f in $LORAS; do FLAGS="$FLAGS --lora /loras/$f.gguf"; done
fi

[ -z "$GELLI_API_URL" ] && gelli-serve $MODEL $LORAS

setup-worktree

# Initialize chat history
messages='[
  {"role":"system","content":"'"$GELLI_SYSTEM_PROMPT"'"},
  {"role":"user","content":"'"$PROMPT"'"}
]'

for iter in $(seq 1 "$MAX"); do
  # Call AI with function schemas
  response=$(call-ai "$messages")

  #TODO show chain of thougha

  fn_name=$(jq -r '.choices[0].message.function_call.name // empty' <<<"$response")
  fn_args=$(jq -r '.choices[0].message.function_call.arguments' <<<"$response")

  if [[ -z "$fn_name" || "$fn_name" == "null" ]]; then
    assistant=$(jq -r '.choices[0].message.content' <<<"$response")
    echo -e "$assistant"
    exit 0
  fi

  # Execute requested tool
  result=$(call-fn "$fn_name" "$fn_args")

  # Append call and result to messages
  call_msg=$(jq -nc --arg name "$fn_name" --arg args "$fn_args" '{role:"assistant",function_call:{name:$name,arguments:($args|fromjson)}}')
  result_msg=$(jq -nc --arg name "$fn_name" --arg res "$result" '{role:"function",name:$name,content:$res}')
  messages=$(jq -nc --argjson m "$messages" --argjson c "$call_msg" --argjson r "$result_msg" '$m + [$c,$r]')
done

echo "⚠️  Reached max iterations ($MAX) without final response." >&2
exit 1
