#!/usr/bin/env sh
set -e

# USAGE: gelli coder - Run an iteration of the coder AI
#
# gelli coder [model] [loras...] [-- prompt] - Run model inference with specified prompt and optional LoRAs
#
#   MODEL defaults to $GELLI_MODEL or ol:qwen2.5-Coder:0.5b-Instruct
#   LORAS defaults to $GELLI_LORAS (space separated)
#
#   Examples:
#
#     gelli coder ol:qwen3:0.6b -- "Review the code base"
#     cat file  |  gelli prompt ol:qwen2.5-Coder:0.5b-Instruct -- "can you do something with this"

CTX_SIZE=${GELLI_CTX_SIZE:-0}
BATCH_SIZE=${GELLI_BATCH_SIZE:-512}
OUTPUT_SIZE=${GELLI_OUTPUT_SIZE:-999999}

PORT=${GELLI_PORT:-7771}
MODEL=""
LORAS=""
FLAGS="$GELLI_LLAMA_FLAGS"
PROMPT=""
BRANCH="${GELLI_BRANCH:-gelli-coder}"
TOOLS=""

API=${GELLI_API_URL:-http://localhost:$PORT}
KEY=${GELLI_API_KEY:-GELLI}
MAX=${GELLI_MAY_CALLS:-25}

# Color codes
C_THINK="\e[33m"    # yellow
C_USER="\e[36m"     # cyan
C_ASSIST="\e[32m"   # green
C_TOOL="\e[35m"     # magenta
C_RESET="\e[0m"

cleanup() {
    cd /work

    [ -n "$SERVER_PID" ] && kill "$SERVER_PID" 2>/dev/null || true

    wait "$SERVER_PID" 2>/dev/null || true

    [ -d "/tmp/$BRANCH" ] && git worktree remove --force "/tmp/$BRANCH" 2>/dev/null || true
}
trap cleanup EXIT SIGTERM SIGINT

call-ai() {
  local post=$(jq -c -n \
      --arg model "$MODEL" \
      --argjson messages "${1:-"{}"}" \
      --argjson tools "$TOOLS" \
      '{model:$model,messages:$messages,tools:$tools,tool_choice:"auto",stream:true}')

  #echo "$post"

  curl -sN "$API/v1/chat/completions" \
    -H "Authorization: Bearer $KEY" \
    -H "Content-Type: application/json" \
    -d "$post"
}

call-fn() {
  if [ -e "/tools/$1" ]; then
    "/tools/$1" "$2"

    [ "$?" = 0 ] || echo "Error: unknown fail - $1($2)"
  else
    echo "Error: unknown tool - $1($2)"
  fi
}

list-fn() {
  grep '^# DEF: ' /tools/* | sed 's/^.*DEF: //' | jq -R 'fromjson? | select(.) | {"type":"function","function":.}' | jq -sc '.'
}

work-dir() {
  [ -d ".git" ] || return

  local dir="/tmp/$BRANCH"

  git worktree prune 2>/dev/null || true
  git worktree add --force "$dir"
  cd "$dir"

  # Try to switch, create if doesn't exist
  git switch "$BRANCH" 2>/dev/null || git switch -c "$BRANCH"
}

while [ $# -gt 0 ]; do
  case $1 in
    --)
      shift

      if [ -z "$PROMPT" ]; then
        PROMPT="$*"
      else
        PROMPT="$PROMPT\n\n$*"
      fi

      break
      ;;
    *)
      if [ -z "$MODEL" ]; then
        MODEL="$1"
      else
        LORAS="$LORAS $1"
      fi
      ;;
  esac

  shift
done

if [ -z "$MODEL" ]; then
  MODEL=${GELLI_MODEL:-$GELLI_DEFAULT}
  LORAS=${GELLI_LORAS:-}
fi

if [ -z "$PROMPT" ]; then
  echo "Missing prompt..."
  exit 1
fi

MODEL=$(gelli-models download $MODEL)
LORAS=$(gelli-loras download $LORAS)
TOOLS=$(list-fn)

if [ -n "$LORAS" ]; then
  for f in $LORAS; do FLAGS="$FLAGS --lora /loras/$f.gguf"; done
fi

if [ -z "$GELLI_API_URL" ]; then
  GELLI_TEMP=${GELLI_TEMP:-0.8}

  gelli-serve $MODEL $LORAS > /dev/null 2>&1 &

  SERVER_PID=$!

  until curl -sf "$API/health" > /dev/null; do
    sleep 0.2
  done
fi

work-dir

# Initialize chat history
messages='[
  {"role":"system","content":"'"${GELLI_SYSTEM_PROMPT:-"You are a coding assistant with several tools. Use these tools to fulfill the user's request. If you don't see the tools tell the user. All defaults are blank so you must populate."}"'"},
  {"role":"user","content":"'"$PROMPT"'"}
]'

# Initialize tool calls
tool_calls=""

for iter in $(seq 1 "$MAX"); do
  echo "=== $iter / $MAX ==="

  while IFS= read -r data; do
    [ -z "$data" ] && continue
    [ "$data" = "data: [DONE]" ] && break

    finish=$(echo "${data#data: }" | jq -r '.choices[0].finish_reason // empty')
    delta=$(echo "${data#data: }" | jq -c '.choices[0].delta')

    #TODO: allow interaction

    # Reasoning
    if reasoning=$(echo "$delta" | jq -r '.reasoning_content // empty'); [ -n "$reasoning" ]; then
      printf "${C_THINK}%s${C_RESET}" "$reasoning"
    # Talking
    elif content=$(echo "$delta" | jq -r '.content // empty'); [ -n "$content" ]; then
      printf "${C_ASSIST}%s${C_RESET}" "$content"
    fi

    # Buffer tool call arguments by (fn_name, idx)
    fn_out=$(echo "$delta" | jq -c '.tool_calls // []')
    fn_len=$(echo "$fn_out" | jq length)

    for i in $(seq 0 $((fn_len - 1))); do
      fn_call=$(echo "$fn_out" | jq -c .[$i])
      fn_slot=$(echo "$fn_call" | jq -r '.index // 0')
      fn_name=$(echo "$fn_call" | jq -r '.function.name // empty')
      fn_args=$(echo "$fn_call" | jq -r '.function.arguments // empty')

      # If function name is here, set the fn_tool
      if [ -n "$fn_name" ]; then
        fn_tool="tool_$(printf '%s' "$fn_name" | tr -c 'a-zA-Z0-9_' '_')_$fn_slot"
        tool_calls="$tool_calls $fn_tool"
      else
        fn_tool=""

        # If the function name isn't here, find the buffer for this index
        for b in $tool_calls; do
          if [ "${b##*_}" = "$idx" ]; then
            fn_tool="$b"
            break
          fi
        done
      fi

      # Always append to the correct buffer, if we found it
      if [ -n "$fn_tool" ] && [ -n "$fn_args" ]; then
        eval "$fn_tool=\"\${$fn_tool:-}\$fn_args\""
      fi
    done

    # On finish_reason:tool_calls, process all buffered tool calls
    if [ "$finish" = "tool_calls" ]; then
      for fn_tool in $tool_calls; do
        fn_call="${fn_tool#tool_}"
        fn_slot="${fn_call##*_}"
        fn_name="${fn_call%_*}"
        fn_args=$(eval echo \"\$$fn_tool\" | jq -c '.')

        printf "\n\n ${C_TOOL}→ %s(%s)${C_RESET}\n" "$fn_name" "$fn_args"

        fn_back=$(call-fn "$fn_name" "$fn_args")

#printf "\n${C_THINK}%s${C_RESET}\n\n" "$fn_back"

        ms_call=$(jq -nc --arg fn_slot "$fn_slot"  --arg fn_name "$fn_name" --arg fn_args "${fn_args:-"{}"}" '{role:"assistant",tool_calls:[{index:$fn_slot,type:"function",function:{name:$fn_name,arguments:$fn_args}}]}')
        ms_back=$(jq -nc --arg fn_back "$fn_back" '{role:"tool",content:$fn_back}')
        messages=$(jq -nc --argjson messages "$messages" --argjson ms_call "$ms_call" --argjson ms_back "$ms_back" '$messages + [$ms_call,$ms_back]')

        unset "$fn_tool"
      done

      echo "$messages"
      # Reset for next batch
      tool_calls=""
    fi
  done < <(call-ai "$messages")

  echo
done

echo "⚠️  Reached max iterations ($MAX) without final response." >&2

exit 1
