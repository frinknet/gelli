#!/bin/env sh
set -e

# USAGE: gelli models - Manage installed models
# 
# gelli models [model]    - Lists installed models
# gelli models import [model] - Import remote or local models
# gelli models export [model] - Export models out of internal storage
# gelli models delete [model] - Delete models from internal storage
# 
# MODEL PATTERNS:
# 
#   ol:model:tag    - Ollama
#   hf:repo:file    - HuggingFace
#   mr:model:quant  - MRadermacher
# 
# Only works with .gguf files

parse_ol() {
  spec=${1#ol:}
  slug=$(printf '%s\n' "$spec" | cut -d: -f1)
  tag=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  tag="${tag:-latest}"
  dest="/models/$(echo "$slug:$tag" | sed 's#[:/\]#-#g').gguf"

  [ -f "$dest" ] && { echo "$dest"; return; }

  manifest="https://registry.ollama.ai/v2/library/${slug}/manifests/${tag}"

  curl -sLX HEAD "$manifest" > /dev/null || error FAILED MANIFEST $manifest

  digest=$(curl -fsSL "$manifest" | jq -r '.layers[0].digest')
  url="https://registry.ollama.ai/v2/library/${slug}/blobs/$digest"

  echo "$dest" "$url"
}

parse_hf() {
  spec=${1#hf:}
  repo=$(printf '%s\n' "$spec" | cut -d: -f1)
  file=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  file="${file:-model.gguf}"
  dest="/models/$(echo "hf-${repo}-${file}" | sed 's#[:/\]#-#g')"

  [ -f "$dest" ] && { echo "$dest"; return; }

  url="https://huggingface.co/$repo/resolve/main/$file.gguf"

  echo "$dest" "$url"
}

parse_mr() {
  spec=${1#mr:}
  model=$(printf '%s\n' "$spec" | cut -d: -f1)
  quant=$(printf '%s\n' "$spec" | cut -s -d: -f2)
  file="$model.$quant"
  dest="/models/mr-${file}.gguf"

  [ -f "$dest" ] && { echo "$dest"; return; }

  url="https://huggingface.co/mradermacher/$model/resolve/main/$file.gguf"

  echo "$dest" "$url"
}

parse() {
  case "$1" in
    ol:*) parse_ol "$1";;
    hf:*) parse_hf "$1";;
    mr:*) parse_mr "$1";;
    *) echo "/models/${1##*/}.gguf";;
  esac
}

fetch() {
  dest="$1"
  url="$2"

  [ -f "$dest" ] || curl -fLo "$dest" "$url" || error "FAILED MODEL FETCH $url"
  [ -f "$dest" ] && basename "${dest%.*}"
}

resolve() {
  for arg in "${@}"; do
    fetch $(parse "$arg") || error MISSING $arg
  done
}

outfile() {
  src="$1"
  dest="/work/${1##*/}"

  mv "$src" "$dest" 
}

export() {
  for arg in "$@"; do
    outfile $(parse "$arg") || error MISSING $arg
  done
}

infile() {
  src="$1"
  dest="/models/${1##*/}"

  [ "$src" != "$dest" ] && mv "$src" "$dest" 
}

import() {
  for arg in "$@"; do
    infile $(parse "$arg") || error MISSING $arg
  done
}

list() {
  glob="${1:-*}"

  cd /models

  for f in $glob; do
    [ -f "$f" ] && printf '%s\n' "${f%.*}"
  done
}

delete() {
  for arg in "$@"; do
    file=$(parse "$arg")

    rm "$file" || error FAILED TO REMOVE $arg
  done
}

CMD="$1"

shift || true

case "$CMD" in
  ""|list) list "$@";;
  delete) delete "$@";;
  import) import "$@";;
  export) export "$@";;
  resolve) parse "$@";;
  *) eval "$BIN-help models";;
esac
