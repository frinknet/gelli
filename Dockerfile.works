# GELLI - Generic Edge Local Llama Interface
FROM alpine:latest AS build
RUN apk add --no-cache \
  build-base cmake git bash curl-dev openblas-dev go

WORKDIR /src/llama.cpp

# Get llama source
RUN git clone --depth 1 "https://github.com/ggml-org/llama.cpp" .

# Fix header problem (may cause problems don't know)
RUN find . -type f -name "*.cpp" -exec sed -i 's/<linux\/limits.h>/<limits.h>/g' {} +
RUN find . -type f -name "*.c"	 -exec sed -i 's/<linux\/limits.h>/<limits.h>/g' {} +

# Dynamic backends + BLAS + all CPUs
RUN cmake -B build \
  -DGGML_BLAS=ON \
  -DGGML_BLAS_VENDOR=OpenBLAS \
  -DGGML_CPU_ALL_VARIANTS=ON \
  -DBUILD_SHARED_LIBS=ON \
  -DGGML_BACKEND_DL=ON \
  -DGGML_NATIVE=OFF \
  -DLLAMA_BUILD_TESTS=OFF \
  -DLLAMA_BUILD_EXAMPLES=ON \
  -DGGML_BACKEND_DIR=/usr/local/lib \
  -DCMAKE_BUILD_TYPE=Release

RUN cmake --build build --config Release

WORKDIR /src/llama-swap
RUN git clone --depth 1 https://github.com/mostlygeek/llama-swap .
RUN mkdir -p proxy/ui_dist
RUN touch proxy/ui_dist/index.html
RUN go build -ldflags="-X main.commit=$(git rev-parse --short HEAD) -X main.version=local_$(git rev-parse --short HEAD) -X main.date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" -o /usr/local/bin/llama-swap .

# Final lean stage
FROM alpine:latest

# Set version and image name
ARG VERSION
ARG IMAGE

# Copy ALL binaries in one layer
COPY --from=build /src/llama.cpp/build/bin/llama* /usr/local/bin/
COPY --from=build /usr/local/bin/llama-swap /usr/local/bin/

# Copy ALL shared libraries in one layer
COPY --from=build /src/llama.cpp/build/bin/*.so /usr/local/lib/

# Install dependencies
RUN apk add --no-cache jq vim git curl libstdc++ libgomp openblas

# YQ must be installed seperately
RUN mkdir -p /models /loras /work /tools /usr/local/lib \
 && curl -sSLo /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
 && chmod +x /usr/bin/yq

# Add tools directory
COPY . /$IMAGE/

# Wrapper + entrypoint
RUN <<ENTRYBIN

# Version file
printf 'GELLI %s\n' "$VERSION" > "$IMAGE/VERSION"

# Environment loader
cat > /bin/env <<'ENV'
#!/usr/bin/env sh
source $ENV

case "$1" in
"sh --agent")
  shift
  dispatch "$1"
  ;;
"sh --tool")
  shift
  tooling "$1"
  cmd="$1"
  shift || true
  set -- "$@"
  exec source "$cmd"
  ;;
"sh")
  shift
  cmd="$1"
  shift || true
  set -- "$@"
  source "$cmd"
  ;;
esac
ENV

chmod +x /bin/env

# Entrypoint runner
ln -sf "/$IMAGE/entrypoint.sh" /bin/$IMAGE
ln -sf "/$IMAGE/entrypoint.sh" /bin/entrypoint

ENTRYBIN

# Set default model
ENV ENV=/$IMAGE/common.sh \
GELLI_DEFAULT=ol:qwen3:1.7b

# Ready to rock
WORKDIR /work
ENTRYPOINT ["/bin/entrypoint"]
